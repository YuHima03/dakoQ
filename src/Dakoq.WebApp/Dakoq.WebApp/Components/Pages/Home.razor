@page "/"
@inject NavigationManager Navigation
@inject RepositoryContext DbContext
@inject IOptions<AppConfiguration> AppConfig

<PageTitle>dakoQ</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="flex flex-col gap-y-4 w-full max-w-7xl">
            @if (JoiningRoom is not null)
            {
                <Dakoq.WebApp.Components.Views.Common.MainSection SectionTitle="参加中の部屋">
                    <Dakoq.WebApp.Components.Views.Common.ResourceList>
                        <Dakoq.WebApp.Components.Views.EntityView.RoomEntity.RoomListItem Room="@JoiningRoom" IsJoiningRoom="@true" />
                    </Dakoq.WebApp.Components.Views.Common.ResourceList>
                </Dakoq.WebApp.Components.Views.Common.MainSection>
            }

            <Dakoq.WebApp.Components.Views.Common.MainSection SectionTitle="開場中の部屋">
                <Dakoq.WebApp.Components.Views.Common.ResourceList>
                    @foreach (var r in CurrentAvailableRooms)
                    {
                        <Dakoq.WebApp.Components.Views.EntityView.RoomEntity.RoomListItem Room="@r" />
                    }
                </Dakoq.WebApp.Components.Views.Common.ResourceList>
            </Dakoq.WebApp.Components.Views.Common.MainSection>

            <Dakoq.WebApp.Components.Views.Common.MainSection SectionTitle="常設の部屋">
                <Dakoq.WebApp.Components.Views.Common.ResourceList>
                    @foreach (var r in PermanentlyAvailableRooms)
                    {
                        <Dakoq.WebApp.Components.Views.EntityView.RoomEntity.RoomListItem Room="@r" />
                    }
                </Dakoq.WebApp.Components.Views.Common.ResourceList>
            </Dakoq.WebApp.Components.Views.Common.MainSection>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    List<Dakoq.Repository.Models.Room>? _availableRooms;

    Dakoq.Repository.Models.Room? JoiningRoom { get; set; }

    IEnumerable<Dakoq.Repository.Models.Room> PermanentlyAvailableRooms => _availableRooms?.Where(r => r.StartsAt is null && r.EndsAt is null).Where(r => r.Id != JoiningRoom?.Id) ?? [];
    IEnumerable<Dakoq.Repository.Models.Room> CurrentAvailableRooms => _availableRooms?.Where(r => r.StartsAt is not null || r.EndsAt is not null).Where(r => r.Id != JoiningRoom?.Id) ?? [];

    protected override async Task OnInitializedAsync()
    {
        _availableRooms = await DbContext.GetAvailableRoomsAsync();
    }
}
